#!/usr/bin/env python
import argparse
from email_message import get_connection, PROTOCOL
import hashlib
import hotqueue
import logging
import logging.handlers
import os
from redis import ConnectionError
import simplejson
import socket
import sys
import time

from mailmachine.configuration import load_config
from mailmachine import mail
from mailmachine import queue


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Mail machine arguments')
    default_config = '/etc/mailmachine.yaml'
    parser.add_argument('-c', '--config', help='Specify configuration file',
                        default=default_config if os.path.exists(default_config) else None)
    args = parser.parse_args()
    config = load_config(args.config)
    rc = config['redis']
    mail_queue = queue.MailQueue(rc['mail_queue'], host=rc['host'], port=rc['port'],
                                 password=rc.get('password'))

    mail_errors_queue = hotqueue.HotQueue(rc['mail_errors_queue'],
                                          host=rc['host'], port=rc['port'],
                                          password=rc.get('password'))
    lc = config['logging']
    logger = logging.getLogger('mail-machine')
    logger.setLevel(getattr(logging, lc['level']))
    if lc['console']:
        console_handler = logging.StreamHandler(sys.stdout)
        logger.addHandler(console_handler)

    if lc['syslog']:
        syslog_handler = logging.handlers.SysLogHandler(facility=logging.handlers.SysLogHandler.LOG_DAEMON)
        logger.addHandler(syslog_handler)

    mc = config['mailing']
    if lc['email'] and lc['admins']:
        # probably we should use alternative mailing server here
        hostname = socket.getfqdn()
        subject = 'Log message %s' % hostname
        from_addr = 'logging@%s' % hostname
        smtp_handler = logging.handlers.SMTPHandler((mc['host'], mc['port']), from_addr,
                                                    lc['admins'], subject=subject,
                                                    credentials=(mc['username'], mc['password']),
                                                    secure=() if mc['protocol'] != PROTOCOL.PLAIN else None)
        logger.addHandler(smtp_handler)

    def _send(message):
        try:
            connection = get_connection(mc['host'], mc['port'], username=mc['username'],
                                        password=mc['password'], protocol=mc['protocol'])

            mail.send(connection, **message)
        except Exception, e:
            payload = {'msg': message, 'timestamp': time.time(), 'excepion': unicode(e)}
            uid = hashlib.sha256(simplejson.dumps(payload)).hexdigest()
            mail_errors_queue.put(dict(payload, uid=uid))
            logger.exception(e)
            raise
        else:
            try:
                connection.quit()
            except socket.sslerror:
                # This happens when calling quit() on a TLS connection
                # sometimes.
                connection.close()

    send_mails = mail_queue.worker(_send)
    if rc.get('reconnect'):
        while True:
            try:
                send_mails()
            except ConnectionError, e:
                logger.exception(e)
            else:
                break
    else:
        try:
            send_mails()
        except ConnectionError, e:
            logger.exception(e)
