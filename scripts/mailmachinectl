#!/usr/bin/env python
import argparse
import os
import pprint
from email_message import get_connection
from pygments import highlight
from pygments.formatters import TerminalFormatter
from pygments.lexers import JSONLexer
import simplejson

from mailmachine import enqueue, send
from mailmachine.configuration import load_config
from mailmachine.queue import MailQueue


def _print(result, colors):
    json = simplejson.dumps(result, sort_keys=True, indent=4)
    if colors:
        print highlight(json, JSONLexer(), TerminalFormatter())
    else:
        pprint.pprint(json)

def _build_attachments(attachments_info):
    attachments = []
    for file_path, mime in attachments_info:
        attachments.append((os.path.basename(file_path),
                            open(file_path, 'r').read(),
                            mime))
    return attachments

def do_enqueue(args, config):
    c = config['redis']
    mail_queue = MailQueue(c['mail_queue'], host=c['host'], port=c['port'],
                           password=c.get('password'))

    mail = simplejson.loads(args.mail_data)
    mail['attachments'] = _build_attachments(mail.get('attachments', []))
    enqueue(mail_queue, **mail)

def do_send(args, config):
    mc = config['mailing']
    mail = simplejson.loads(args.mail_data)
    connection = get_connection(mc['host'], mc['port'], username=mc['username'],
                                password=mc['password'], use_tls=mc['use_tls'])
    mail['attachments'] = _build_attachments(mail.get('attachments', []))
    send(connection, **mail)

def do_snapshot(args, config):
    c = config['redis']
    mail_queue = MailQueue(c['mail_queue'], host=c['host'], port=c['port'],
                           password=c.get('password'))
    _print(mail_queue.snapshot(), not args.no_colors)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Put mail to mailing queue')
    default_config = '/etc/mailmachine.yaml'
    parser.add_argument('-c', '--config', help='Specify configuration file',
                        default=default_config if os.path.exists(default_config) else None)
    subparsers = parser.add_subparsers(help='Subcommands help')

    enqueue_parser = subparsers.add_parser('enqueue')
    enqueue_parser.add_argument('mail_data')
    enqueue_parser.set_defaults(func=do_enqueue)

    send_parser = subparsers.add_parser('send')
    send_parser.add_argument('mail_data')
    send_parser.set_defaults(func=do_send)

    snapshot_parser = subparsers.add_parser('snapshot')
    snapshot_parser.add_argument('--no-colors', help='Print result in colors',
                             default=False, action='store_true')
    snapshot_parser.set_defaults(func=do_snapshot)

    args = parser.parse_args()
    config = load_config(args.config)
    args.func(args, config)
