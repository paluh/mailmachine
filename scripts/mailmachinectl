#!/usr/bin/env python
import argparse
import os
import pprint
import email
from email_message import get_connection
from pygments import highlight
from pygments.formatters import TerminalFormatter
from pygments.lexers import JSONLexer
from pygments.token import Keyword, Name, Punctuation, Comment, String, Whitespace
import simplejson
import sys

from mailmachine import enqueue, send
from mailmachine.configuration import load_config
from mailmachine.queue import MailQueue


def _print(result, colors):
    json = simplejson.dumps(result, sort_keys=True, indent=4)
    if colors:
        print highlight(json, JSONLexer(), TerminalFormatter())
    else:
        pprint.pprint(json)

def _build_attachments(attachments_info):
    attachments = []
    for file_path, mime in attachments_info:
        attachments.append((os.path.basename(file_path),
                            open(file_path, 'r').read(),
                            mime))
    return attachments

def do_enqueue(args, config):
    c = config['redis']
    mail_queue = MailQueue(c['mail_queue'], host=c['host'], port=c['port'],
                           password=c.get('password'))

    mail = simplejson.loads(args.mail_data)
    mail['attachments'] = _build_attachments(mail.get('attachments', []))
    enqueue(mail_queue, **mail)

def do_send(args, config):
    mc = config['mailing']
    mail = simplejson.loads(args.mail_data)
    connection = get_connection(mc['host'], mc['port'], username=mc['username'],
                                password=mc['password'], use_tls=mc['use_tls'])
    mail['attachments'] = _build_attachments(mail.get('attachments', []))
    send(connection, **mail)

def do_snapshot(args, config):
    c = config['redis']
    mail_queue = MailQueue(c['mail_queue'], host=c['host'], port=c['port'],
                           password=c.get('password'))
    parser = email.Parser.Parser()
    tokens = []
    separator = (Comment, '\n\n-------------------------------------------------------------------\n\n')
    for sender, recipients, msg in mail_queue.snapshot():
        tokens.append(separator)
        sender = email.utils.parseaddr(sender)
        tokens.append((Keyword.Type, 'Sender: '))
        tokens.append((Name.Variable, email.utils.formataddr([p[0] for s in sender for p in email.header.decode_header(s)])))
        tokens.append((Whitespace, '\n'))
        tokens.append((Keyword.Type, 'Recipients: '))
        for r in recipients:
            for i,p in enumerate(email.header.decode_header(r)):
                if i > 0:
                    tokens.append((Punctuation, ', '))
                tokens.append((Name.Variable, p[0]))
        tokens.append((Whitespace, '\n'))
        msg = parser.parsestr(msg.encode('utf-8'))
        tokens.append((Keyword.Type, 'Subject: '))
        tokens.append((Name.Variable, msg.get('Subject')))
        tokens.append((Whitespace, '\n'))
        body = None
        attachments = []
        for part in msg.walk():
            if part.get('Content-Disposition', None):
                ds = {}
                for p in part.get('Content-Disposition').split(';'):
                    if '=' in p:
                        n, v = p.split('=', 1)
                        ds[n.strip().lower()] = v.strip()
                filename = next((v for n,v in ds.items() if n.lower()=='filename'), None)
                if filename:
                    attachments.append((filename, part.get_content_type()))
            elif part.get_content_type() == 'text/plain':
                body = '' if body is None else body
                body += unicode(
                    part.get_payload(decode=True),
                    part.get_content_charset(),
                    'replace'
                ).encode('utf8','replace')
        tokens.append((Keyword.Type, 'Body: '))
        tokens.append((Whitespace, '\n'))
        tokens.append((Whitespace, '\n'))
        tokens.append((String, body.decode('utf-8')))
        tokens.append((Whitespace, '\n'))
        tokens.append((Whitespace, '\n'))
        if attachments:
            tokens.append((Keyword.Type, 'Attachments: '))
            for i,a in enumerate(attachments):
                if i > 0:
                    tokens.append((Punctuation, ', '))
                tokens.append((Name.Variable, a[0]))
                tokens.append((Whitespace, ' '))
                tokens.append((Name.Tag, a[1]))
    tokens.append(separator)
    formatter = TerminalFormatter()
    formatter.format(tokens, sys.stdout)

def do_cleanup(args, config):
    c = config['redis']
    mail_queue = MailQueue(c['mail_queue'], host=c['host'], port=c['port'],
                           password=c.get('password'))
    for m in mail_queue._queue.consume(block=False):
        print 'Dropping:', m[0]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Put mail to mailing queue')
    default_config = '/etc/mailmachine.yaml'
    parser.add_argument('-c', '--config', help='Specify configuration file',
                        default=default_config if os.path.exists(default_config) else None)
    subparsers = parser.add_subparsers(help='Subcommands help')

    enqueue_parser = subparsers.add_parser('enqueue')
    enqueue_parser.add_argument('mail_data')
    enqueue_parser.set_defaults(func=do_enqueue)

    send_parser = subparsers.add_parser('send')
    send_parser.add_argument('mail_data')
    send_parser.set_defaults(func=do_send)

    snapshot_parser = subparsers.add_parser('snapshot')
    snapshot_parser.add_argument('--no-colors', help='Print result in colors',
                             default=False, action='store_true')
    snapshot_parser.set_defaults(func=do_snapshot)

    cleanup_parser = subparsers.add_parser('cleanup')
    cleanup_parser.set_defaults(func=do_cleanup)

    args = parser.parse_args()
    config = load_config(args.config)
    args.func(args, config)
